package com.yrgo.dataaccess;

import com.yrgo.domain.Call;
import com.yrgo.domain.Customer;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String INSERT_CUSTOMER_SQL = "insert into CUSTOMER (CUSTOMER_ID, COMPANY_NAME, NOTES) values (?, ?, ?) ";
    private static final String CREATE_CUSTOMER_TABLE_SQL = "create table CUSTOMER(CUSTOMER_ID VARCHAR(5) PRIMARY KEY, COMPANY_NAME VARCHAR(50), NOTES VARCHAR(50), EMAIL VARCHAR(50), TELEPHONE VARCHAR(15))";
    private static final String CREATE_CALLS_TABLE_SQL = "create table CALLS_TBL(CALLS_ID integer generated by default as identity (start with 1) " +
            ",CUSTOMER_ID VARCHAR(20)," +
            " NOTES VARCHAR(50)," +
            " TIME_AND_DATE VARCHAR(30))";
    private static final String GET_ALL_CUSTOMERS_SQL = "select * from CUSTOMER";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, NOTES=?  WHERE CUSTOMER_ID=?";
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String GET_CUSTOMER_BY_ID_SQL = "select * from CUSTOMER where CUSTOMER_ID=?";

    private JdbcTemplate jdbcTemplate;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    private void createTables() {
        try {
            jdbcTemplate.update(CREATE_CUSTOMER_TABLE_SQL);
            jdbcTemplate.update(CREATE_CALLS_TABLE_SQL);
        } catch (Exception e) {
            System.err.println("Table already exists");
        }
    }

    @Override
    public void create(Customer customer) {
        jdbcTemplate.update(INSERT_CUSTOMER_SQL, customer.getCustomerId(), customer.getCompanyName(), customer.getNotes());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return this.jdbcTemplate.queryForObject(GET_CUSTOMER_BY_ID_SQL, new CustomerMapper(), customerId);

    }

    @Override
    public List<Customer> getByName(String name) {
        return jdbcTemplate.query("select * from CUSTOMER where COMPANY_NAME=?", new CustomerMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        jdbcTemplate.update(UPDATE_SQL, customerToUpdate.getCompanyName(), customerToUpdate.getNotes(), customerToUpdate.getCustomerId());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        jdbcTemplate.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return jdbcTemplate.query(GET_ALL_CUSTOMERS_SQL, new CustomerMapper());

    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = jdbcTemplate.queryForObject(GET_CUSTOMER_BY_ID_SQL, new CustomerMapper(), customerId);
        assert customer != null;
        customer.setCalls(jdbcTemplate.query("select * from CALLS_TBL where CUSTOMER_ID=?", new CallsMapper(), customerId));
        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        jdbcTemplate.update("INSERT INTO CALLS_TBL (CUSTOMER_ID, NOTES, TIME_AND_DATE) VALUES (?, ?, ?)",
                customerId, newCall.getNotes(), newCall.getTimeAndDate().toString());
    }
}

class CustomerMapper implements RowMapper<Customer> {
    @Override
    public Customer mapRow(ResultSet rs, int rowNumber) throws SQLException {
        String id = rs.getString(1);
        String companyName = rs.getString(2);
        String notes = rs.getString(3);

        Customer customer = new Customer(id, companyName, notes);
        return customer;
    }
}

class CallsMapper implements RowMapper<Call> {
    @Override
    public Call mapRow(ResultSet rs, int rowNumber) throws SQLException {
        String notes = rs.getString(3);
        String date = rs.getString(4);
        LocalDateTime dates = LocalDateTime.parse(date);
        Call call = new Call(notes, dates);
        return call;
    }
}
